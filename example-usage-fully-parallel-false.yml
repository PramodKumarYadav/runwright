# Example workflow demonstrating RunWright with fullyParallel=false
name: "RunWright Example - Sequential Mode"

on:
  workflow_dispatch:
    inputs:
      run-time-minutes:
        description: "Desired total test run time in minutes"
        required: true
        default: "5"
      playwright-command:
        description: "Playwright command to execute"
        required: true
        default: "npx playwright test"

jobs:
  # First job: Calculate optimal test distribution
  calculate-distribution:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.runwright.outputs.dynamic-matrix }}
      test-distribution: ${{ steps.runwright.outputs.test-load-distribution-json }}
      workers: ${{ steps.runwright.outputs.recommended-workers }}
      parallelism-mode: ${{ steps.runwright.outputs.parallelism-mode }}
    steps:
      - name: RunWright - Calculate Test Distribution
        id: runwright
        uses: PramodKumarYadav/runwright@v1
        with:
          total-run-time-in-mins: ${{ inputs.run-time-minutes }}
          pw-command-to-execute: ${{ inputs.playwright-command }}
          fully-parallel: false # This enables file-level distribution

  # Second job: Execute tests in parallel using the calculated distribution
  execute-tests:
    needs: calculate-distribution
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runner-id: ${{ fromJson(needs.calculate-distribution.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Extract Tests for Runner ${{ matrix.runner-id }}
        id: extract-tests
        run: |
          echo "üéØ Extracting tests for Runner ${{ matrix.runner-id }}..."

          # Get test distribution for this runner
          runner_tests='${{ needs.calculate-distribution.outputs.test-distribution }}'
          current_runner_tests=$(echo "$runner_tests" | jq -r '.["${{ matrix.runner-id }}"]')

          echo "üìã Tests for this runner:"
          echo "$current_runner_tests" | jq

          # Build Playwright command with specific test files
          # For fullyParallel=false, we run entire files to maintain test isolation
          playwright_args=""
          for project in $(echo "$current_runner_tests" | jq -r 'keys[]'); do
            test_files=$(echo "$current_runner_tests" | jq -r ".\"$project\"[]" | cut -d':' -f1 | sort -u)
            for file in $test_files; do
              playwright_args="$playwright_args --project=$project $file"
            done
          done

          echo "üöÄ Playwright command args: $playwright_args"
          echo "PLAYWRIGHT_ARGS=$playwright_args" >> $GITHUB_OUTPUT

      - name: Run Playwright Tests
        run: |
          echo "üé≠ Running Playwright tests for Runner ${{ matrix.runner-id }}..."
          echo "‚öôÔ∏è  Parallelism Mode: ${{ needs.calculate-distribution.outputs.parallelism-mode }}"
          echo "üë• Workers: ${{ needs.calculate-distribution.outputs.workers }}"

          # Execute the tests with the specified arguments
          ${{ inputs.playwright-command }} ${{ steps.extract-tests.outputs.PLAYWRIGHT_ARGS }} --workers=${{ needs.calculate-distribution.outputs.workers }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results-runner-${{ matrix.runner-id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
